basePath: /api/v1
definitions:
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.TaskRequest:
    properties:
      createdBy:
        type: string
      deadline:
        type: string
      description:
        minLength: 5
        type: string
      startDate:
        type: string
      title:
        maxLength: 100
        type: string
    required:
    - deadline
    - description
    - startDate
    - title
    type: object
  dto.TaskResponse:
    properties:
      completed:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: string
      deadline:
        type: string
      description:
        type: string
      startDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      uuid:
        type: string
    type: object
  dto.TaskUpdate:
    properties:
      completed:
        type: boolean
      deadline:
        type: string
      description:
        minLength: 5
        type: string
      startDate:
        type: string
      updatedBy:
        type: string
    type: object
  model.Task:
    properties:
      completed:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: string
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      startDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      updatedBy:
        type: string
      uuid:
        type: string
    type: object
  utils.APIResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        default: true
        type: boolean
    type: object
  utils.HTTPError:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        default: false
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple CRUD API for qubic ball assessment
  title: Task Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: 'Sample Payload: <br> `{ `<br>` "username": "username", `<br>`
        "password": "password" `<br>` }`'
      parameters:
      - description: Login Request Body
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: string
                message:
                  type: string
                status:
                  type: string
              type: object
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "500":
          description: Failed to login
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: 'Sample Payload: <br> `{ `<br>` "username": "username", `<br>`
        "email": "email@gmail.com", `<br>` "password": "password" `<br>` }`'
      parameters:
      - description: Register Request Body
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: string
                message:
                  type: string
                status:
                  type: string
              type: object
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/utils.HTTPError'
      summary: Register User
      tags:
      - Auth
  /tasks:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks
      produces:
      - application/json
      responses:
        "200":
          description: Tasks fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.TaskResponse'
                  type: array
              type: object
        "204":
          description: Tasks No Record
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "500":
          description: Failed to fetch tasks
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - Bearer: []
      summary: Get All Tasks
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: 'Sample Payload: <br> `{ `<br>` "title": "Fix Bugs", `<br>` "description":
        "fix multiple bugs in dev", `<br>` "startDate": "2024-12-05T00:00:00Z", `<br>`
        "deadline": "2024-12-07T00:00:00Z" `<br>` }`'
      parameters:
      - description: Task Request Body
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.TaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  type: string
                message:
                  type: string
                status:
                  type: string
              type: object
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "500":
          description: Failed to create task
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - Bearer: []
      summary: Create Tasks
      tags:
      - Tasks
  /tasks/{uuid}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Task Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            $ref: '#/definitions/utils.APIResponse'
        "400":
          description: Invalid request
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "404":
          description: Task not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
      security:
      - Bearer: []
      summary: Delete Task
      tags:
      - Tasks
    get:
      consumes:
      - application/json
      parameters:
      - description: Task Uuid
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task fetched successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.TaskResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "404":
          description: Task not found
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "500":
          description: Failed to fetch task
          schema:
            $ref: '#/definitions/utils.HTTPError'
      security:
      - Bearer: []
      summary: Get Task by Uuid
      tags:
      - Tasks
    patch:
      consumes:
      - application/json
      description: 'Sample Payload (only send the ones you want to update): <br> `{
        `<br>` "description": "fix lots of bugs", `<br>` "completed": true, `<br>`
        "startDate": "2024-12-05T00:00:00Z", `<br>` "deadline": "2024-12-07T00:00:00Z"
        `<br>` }`'
      parameters:
      - description: Task Uuid
        in: path
        name: uuid
        required: true
        type: string
      - description: Updated Task
        in: body
        name: taskUpdate
        required: true
        schema:
          $ref: '#/definitions/dto.TaskUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/model.Task'
        "400":
          description: Invalid input
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/utils.APIResponse'
            - properties:
                message:
                  type: string
                status:
                  type: string
              type: object
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/utils.APIResponse'
      security:
      - Bearer: []
      summary: Update Task
      tags:
      - Tasks
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
